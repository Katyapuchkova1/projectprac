# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import numpy as np
from PyQt5.QtCore import QCoreApplication
from enum import Enum
from model import Model
from PyQt5.QtCore import Qt
from master import StateMaster
from utilities import convert_step_modelling


class Ui_Barbershop(object):

    def __init__(self):
        self.model_config = None
        self.modelling = None
        self.open_hours = None
        self.parameters = None
        self.hours_of_open = None
        self.opening_hours = None
        self.model = None

    def setup_model(self):
        step_model = convert_step_modelling(self.step_modelling.currentText())
        masters_in_room = self.spinBox_masters.value()
        ot_request = int(self.ot_request.text())
        do_request = int(self.do_request.text())
        ot_decline = int(self.ot_decline.text())
        do_decline = int(self.do_decline.text())
        self.model_config = {
            'step_model':step_model,
            'masters_in_room':masters_in_room,
            'ot_request':ot_request,
            'do_request':do_request,
            'ot_decline':ot_decline,
            'do_decline':do_decline,
        }
        self.model: Model = Model(**self.model_config)
        #self.check_params()


    def setting_up_model(self):
        setted_up = False

        while not setted_up:
            self.setup_model()
            code_ = self.check_params()
            if code_ == 0:
                setted_up = True


    def model_step(self):
        for i in range(self.model_config['step_model']):
            self.model.tick()
        if self.model.barbershop_open:
            self.visualization()
        else:
            while not self.model.barbershop_open:
                self.model.tick()
            self.visualization()

    def model_end(self):
        while self.model.current_time < self.model.end_time:
            self.model.tick()
        self.visualization(state=State_model.finish)

    def restart_modelling(self):
        self.model: Model = Model(**self.model_config)
        self.served_clients.setPlainText('0')
        self.serving_duration.setPlainText(str(self.model.avg_duration_of_servicing))
        self.prostoy_time.setPlainText('0')
        self.masters_salary.setPlainText(str(self.model.avg_week_payment()))
        time = self.model.current_time
        time_parsed = convert_to_new_format(time)
        day = time_parsed[0]
        hours = time_parsed[1]
        minutes = time_parsed[2]
        if self.model.barbershop_open:
            self.barbershop_condition.setPlainText('Открыт')
        else:
            self.barbershop_condition.setPlainText('Закрыт')
        day = str(day)
        if 0 >= hours <= 9:
            hours = '0' + str(hours)
        else:
            hours = str(hours)
        if 0 <= minutes <= 9:
            minutes = '0' + str(minutes)
        else:
            minutes = str(minutes)
        time = hours + ':' + minutes

        self.time.setPlainText('День:' + str(day) + ';Время: ' + time)
        room_queues_poses = self.model.get_queues_pos()
        queue_pos_1 = room_queues_poses[0]
        queue_pos_2 = room_queues_poses[1]
        #area_1 = masters_conditions_list[0]
        #area_2 = masters_conditions_list[1]
        room_number_1 = 0
        room_number_2 = 1
        self.masters_status_1.setPlainText(self.display_masters_conditions_times_left(room_number_1))
        self.masters_status_2.setPlainText(self.display_masters_conditions_times_left(room_number_2))
        self.display_queue(queue_pos_1, self.room_1_queue)
        self.display_queue(queue_pos_2, self.room_2_queue)
        self.display_clients()
        self.display_new_clients()
        self.display_queue_len()

    '''def check_params(self):
        ot_request = self.model_config['ot_request']
        do_request = self.model_config['do_request']
        ot_decline = self.model_config['ot_decline']
        do_decline = self.model_config['do_decline']

        if self.is_int(ot_request) and self.is_int(do_request) and ot_request > 0 and do_request > 0:
            if ot_request < do_request:
                self.show_error_request()
                return -1

        if self.is_int(ot_decline) and self.is_int(do_decline) and ot_request > 0 and do_request > 0:
            if  ot_decline > 0 and do_decline > 0:
                self.show_error_decline()
                return -1
        return 0'''

    '''def show_error_request(self):
        button = QMessageBox.critical(
            self,
            "Ошибка",
            "Неправильный формат ввода: значения должны быть целыми, неотрицательными и задавать диапазон значений для интервала между возникновением двух заявок. Введите новые значения и повторите попытку",
            buttons=QMessageBox.Ok,
            defaultButton=QMessageBox.Discard,
        )

        if button == QMessageBox.Ok:
            self.ot_request.setPlainText('')
            self.do_request.setPlainText('')

    def show_error_decline(self):
        button = QMessageBox.critical(
            self,
            "Ошибка",
            "Неправильный формат ввода: значения чисел должны быть целыми, неотрицательными и задавать диапазон значени для диапазона отклонения от средней длительности обслуживания .Введите новые значения и повторите попытку",
            buttons=QMessageBox.Ok,
            defaultButton=QMessageBox.Discard,
        )

        if button == QMessageBox.Ok:
            self.ot_decline.setPlainText('')
            self.do_decline.setPlainText('')



    def is_int(self, number):
        try:
            is_int = int(number) == number
        except:
            return False
        return is_int'''


    def visualization(self, state=None):
        time = self.model.current_time
        time_parsed = convert_to_new_format(time)
        day = time_parsed[0]
        hours = time_parsed[1]
        minutes = time_parsed[2]
        if self.model.barbershop_open:
            self.barbershop_condition.setPlainText('Открыт')
        else:
            self.barbershop_condition.setPlainText('Закрыт')
        day = str(day)
        if 0 >= hours <= 9:
            hours = '0' + str(hours)
        else:
            hours = str(hours)
        if 0 <= minutes <= 9:
            minutes = '0' + str(minutes)
        else:
            minutes = str(minutes)
        time = hours + ':' + minutes

        self.time.setPlainText('День:' + str(day) + ',Время: ' + time)
        self.served_clients.setPlainText(str(self.model.num_served_clients))
        self.serving_duration.setPlainText(str(self.model.avg_duration_of_servicing))
        self.masters_salary.setPlainText(str(self.model.avg_week_payment()))
        self.prostoy_time.setPlainText(str(self.model.prostoy_masters()))
        room_queues_poses = self.model.get_queues_pos()
        queue_pos_1 = room_queues_poses[0]
        queue_pos_2 = room_queues_poses[1]
        #area_1 = masters_conditions_list[0]
        #area_2 = masters_conditions_list[1]
        room_number_1 = 0
        room_number_2 = 1
        self.masters_status_1.setPlainText(self.display_masters_conditions_times_left(room_number_1))
        self.masters_status_2.setPlainText(self.display_masters_conditions_times_left(room_number_2))
        self.display_queue(queue_pos_1, self.room_1_queue)
        self.display_queue(queue_pos_2, self.room_2_queue)
        self.display_clients()
        self.display_new_clients()
        self.display_queue_len()

    def display_clients(self):
        self.clients_now.setPlainText('')
        for client in self.model.clients:
            self.clients_now.insertPlainText('client_' +  str(client.number) + '\n')

    def display_new_clients(self):
        self.new_clients.setPlainText('')
        for client in self.model.new_clients:
            self.new_clients.insertPlainText('client_' +  str(client.number) + '\n')
        if self.model.current_time % self.model_config['step_model'] == 0:
            self.model.new_clients = []

    def display_queue_len(self):
        queue_lens_per_room = self.model.len_queue_in_rooms()
        queue_room_1 = queue_lens_per_room[0]
        queue_room_2 = queue_lens_per_room[1]
        self.room_1_queue_len.setPlainText(str(queue_room_1))
        self.room_2_queue_len.setPlainText(str(queue_room_2))


    def display_masters_conditions_times_left(self, room_number):
        count_master = 1
        str_to_display = ''
        masters_conditions = self.model.get_masters_conditions(room_number)
        masters_times_left = self.model.get_masters_poses_time_left(room_number)
        dict_to_translate = {StateMaster.waiting: 'ожидает', StateMaster.servicing: 'обслуживает', StateMaster.is_not_working: 'не работает'}
        for i in range(len(masters_conditions)):
            if masters_conditions[i] == StateMaster.servicing: str_to_display += str(count_master) + ' мастер:' + dict_to_translate[masters_conditions[i]] + '\n;' + 'Время до конца обcлуживания:' + str(masters_times_left[i]) + '\n'
            else: str_to_display += str(count_master) + ' мастер:' + dict_to_translate[masters_conditions[i]] + ';\n' + 'Время до конца обcлуживания:' '-' + '\n'
        return str_to_display

    def display_queue(self, queue_poses, widget):
        for i in range(queue_poses.get_len()):
            item = QtWidgets.QListWidgetItem()
            widget.addItem(item)
            widget.item(i).setText('client_' +  str(queue_poses[i].client.number) + '\n')
    def setupUi(self, Barbershop):
        Barbershop.setObjectName("Barbershop")
        Barbershop.resize(1316, 724)
        self.label = QtWidgets.QLabel(Barbershop)
        self.label.setGeometry(QtCore.QRect(50, 150, 181, 41))
        self.label.setObjectName("label")
        self.spinBox_masters = QtWidgets.QSpinBox(Barbershop)
        self.spinBox_masters.setGeometry(QtCore.QRect(50, 300, 111, 31))
        self.spinBox_masters.setObjectName("spinBox_masters")
        self.spinBox_masters.setMinimum(2)
        self.spinBox_masters.setMaximum(5)
        self.label_3 = QtWidgets.QLabel(Barbershop)
        self.label_3.setGeometry(QtCore.QRect(50, 250, 181, 41))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Barbershop)
        self.label_4.setGeometry(QtCore.QRect(180, 300, 81, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Barbershop)
        self.label_5.setGeometry(QtCore.QRect(50, 360, 301, 16))
        self.label_5.setObjectName("label_5")
        self.ot_request = QtWidgets.QLineEdit(Barbershop)
        self.ot_request.setGeometry(QtCore.QRect(60, 420, 113, 22))
        self.ot_request.setObjectName("ot_request")
        self.ot_request.setText('1')
        self.do_request = QtWidgets.QLineEdit(Barbershop)
        self.do_request.setGeometry(QtCore.QRect(270, 420, 113, 22))
        self.do_request.setObjectName("do_request")
        self.do_request.setText('4')
        self.label_6 = QtWidgets.QLabel(Barbershop)
        self.label_6.setGeometry(QtCore.QRect(20, 410, 21, 31))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(Barbershop)
        self.label_7.setGeometry(QtCore.QRect(220, 410, 21, 31))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(Barbershop)
        self.label_8.setGeometry(QtCore.QRect(50, 470, 301, 16))
        self.label_8.setObjectName("label_8")
        self.ot_decline = QtWidgets.QLineEdit(Barbershop)
        self.ot_decline.setGeometry(QtCore.QRect(60, 530, 113, 22))
        self.ot_decline.setObjectName("ot_decline")
        self.ot_decline.setText('1')
        self.do_decline = QtWidgets.QLineEdit(Barbershop)
        self.do_decline.setGeometry(QtCore.QRect(270, 530, 113, 22))
        self.do_decline.setObjectName("do_decline")
        self.do_decline.setText('4')
        self.label_9 = QtWidgets.QLabel(Barbershop)
        self.label_9.setGeometry(QtCore.QRect(20, 520, 21, 31))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(Barbershop)
        self.label_10.setGeometry(QtCore.QRect(220, 520, 21, 31))
        self.label_10.setObjectName("label_10")
        self.start = QtWidgets.QPushButton(Barbershop)
        self.start.setGeometry(QtCore.QRect(30, 660, 93, 28))
        self.start.setObjectName("start")
        self.step = QtWidgets.QPushButton(Barbershop)
        self.step.setGeometry(QtCore.QRect(130, 660, 93, 28))
        self.step.setObjectName("step")
        self.step.setDisabled(True)
        self.end = QtWidgets.QPushButton(Barbershop)
        self.end.setGeometry(QtCore.QRect(330, 660, 93, 28))
        self.end.setObjectName("end")
        self.exit = QtWidgets.QPushButton(Barbershop)
        self.exit.setGeometry(QtCore.QRect(1180, 660, 93, 28))
        self.exit.setObjectName("exit")
        self.label_11 = QtWidgets.QLabel(Barbershop)
        self.label_11.setGeometry(QtCore.QRect(480, 100, 101, 21))
        self.label_11.setTextFormat(QtCore.Qt.AutoText)
        self.label_11.setObjectName("label_11")
        self.label_13 = QtWidgets.QLabel(Barbershop)
        self.label_13.setGeometry(QtCore.QRect(710, 310, 101, 21))
        self.label_13.setTextFormat(QtCore.Qt.AutoText)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(Barbershop)
        self.label_14.setGeometry(QtCore.QRect(940, 50, 141, 21))
        self.label_14.setTextFormat(QtCore.Qt.AutoText)
        self.label_14.setObjectName("label_14")
        self.time = QtWidgets.QPlainTextEdit(Barbershop)
        self.time.setGeometry(QtCore.QRect(1090, 40, 141, 41))
        self.time.setObjectName("time")
        self.line_2 = QtWidgets.QFrame(Barbershop)
        self.line_2.setGeometry(QtCore.QRect(440, 90, 21, 271))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.label_15 = QtWidgets.QLabel(Barbershop)
        self.label_15.setGeometry(QtCore.QRect(470, 130, 131, 21))
        self.label_15.setTextFormat(QtCore.Qt.AutoText)
        self.label_15.setObjectName("label_15")
        self.line_3 = QtWidgets.QFrame(Barbershop)
        self.line_3.setGeometry(QtCore.QRect(450, 350, 421, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(Barbershop)
        self.line_4.setGeometry(QtCore.QRect(870, 90, 21, 271))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(Barbershop)
        self.line_5.setGeometry(QtCore.QRect(450, 80, 431, 16))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(Barbershop)
        self.line_6.setGeometry(QtCore.QRect(420, 80, 21, 531))
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.label_18 = QtWidgets.QLabel(Barbershop)
        self.label_18.setGeometry(QtCore.QRect(930, 430, 181, 21))
        self.label_18.setTextFormat(QtCore.Qt.AutoText)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(Barbershop)
        self.label_19.setGeometry(QtCore.QRect(970, 480, 191, 21))
        self.label_19.setTextFormat(QtCore.Qt.AutoText)
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(Barbershop)
        self.label_20.setGeometry(QtCore.QRect(980, 520, 181, 21))
        self.label_20.setTextFormat(QtCore.Qt.AutoText)
        self.label_20.setObjectName("label_20")
        self.served_clients = QtWidgets.QPlainTextEdit(Barbershop)
        self.served_clients.setGeometry(QtCore.QRect(1170, 480, 61, 31))
        self.served_clients.setObjectName("served_clients")
        self.served_clients.setPlainText('0')
        self.label_21 = QtWidgets.QLabel(Barbershop)
        self.label_21.setGeometry(QtCore.QRect(650, 130, 141, 21))
        self.label_21.setTextFormat(QtCore.Qt.AutoText)
        self.label_21.setObjectName("label_21")
        self.serving_duration = QtWidgets.QPlainTextEdit(Barbershop)
        self.serving_duration.setGeometry(QtCore.QRect(1170, 520, 61, 31))
        self.serving_duration.setObjectName("serving_duration")
        self.serving_duration.setPlainText('-')
        self.label_22 = QtWidgets.QLabel(Barbershop)
        self.label_22.setGeometry(QtCore.QRect(980, 560, 181, 21))
        self.label_22.setTextFormat(QtCore.Qt.AutoText)
        self.label_22.setObjectName("label_22")
        self.masters_salary = QtWidgets.QPlainTextEdit(Barbershop)
        self.masters_salary.setGeometry(QtCore.QRect(1170, 560, 61, 31))
        self.masters_salary.setObjectName("masters_salary")
        self.masters_salary.setPlainText('-')
        self.label_23 = QtWidgets.QLabel(Barbershop)
        self.label_23.setGeometry(QtCore.QRect(980, 600, 181, 21))
        self.label_23.setTextFormat(QtCore.Qt.AutoText)
        self.label_23.setObjectName("label_23")
        self.prostoy_time = QtWidgets.QPlainTextEdit(Barbershop)
        self.prostoy_time.setGeometry(QtCore.QRect(1170, 600, 61, 31))
        self.prostoy_time.setObjectName("prostoy_time")
        self.prostoy_time.setPlainText('0')
        self.room_1_queue_len = QtWidgets.QPlainTextEdit(Barbershop)
        self.room_1_queue_len.setGeometry(QtCore.QRect(820, 310, 41, 31))
        self.room_1_queue_len.setObjectName("room_1_queue_len")
        self.room_1_queue = QtWidgets.QListWidget(Barbershop)
        self.room_1_queue.setGeometry(QtCore.QRect(650, 160, 221, 141))
        self.room_1_queue.setObjectName("room_1_queue")
        self.label_16 = QtWidgets.QLabel(Barbershop)
        self.label_16.setGeometry(QtCore.QRect(710, 610, 101, 21))
        self.label_16.setTextFormat(QtCore.Qt.AutoText)
        self.label_16.setObjectName("label_16")
        self.label_24 = QtWidgets.QLabel(Barbershop)
        self.label_24.setGeometry(QtCore.QRect(650, 430, 141, 21))
        self.label_24.setTextFormat(QtCore.Qt.AutoText)
        self.label_24.setObjectName("label_24")
        self.line_7 = QtWidgets.QFrame(Barbershop)
        self.line_7.setGeometry(QtCore.QRect(450, 650, 431, 20))
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.room_2_queue = QtWidgets.QListWidget(Barbershop)
        self.room_2_queue.setGeometry(QtCore.QRect(650, 460, 221, 141))
        self.room_2_queue.setObjectName("room_2_queue")
        self.label_12 = QtWidgets.QLabel(Barbershop)
        self.label_12.setGeometry(QtCore.QRect(480, 400, 101, 21))
        self.label_12.setTextFormat(QtCore.Qt.AutoText)
        self.label_12.setObjectName("label_12")
        self.line_8 = QtWidgets.QFrame(Barbershop)
        self.line_8.setGeometry(QtCore.QRect(440, 390, 21, 271))
        self.line_8.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_8.setObjectName("line_8")
        self.label_17 = QtWidgets.QLabel(Barbershop)
        self.label_17.setGeometry(QtCore.QRect(470, 430, 131, 21))
        self.label_17.setTextFormat(QtCore.Qt.AutoText)
        self.label_17.setObjectName("label_17")
        self.room_2_queue_len = QtWidgets.QPlainTextEdit(Barbershop)
        self.room_2_queue_len.setGeometry(QtCore.QRect(820, 610, 41, 31))
        self.room_2_queue_len.setObjectName("room_2_queue_len")
        self.line_9 = QtWidgets.QFrame(Barbershop)
        self.line_9.setGeometry(QtCore.QRect(870, 390, 21, 271))
        self.line_9.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_9.setObjectName("line_9")
        self.line_10 = QtWidgets.QFrame(Barbershop)
        self.line_10.setGeometry(QtCore.QRect(450, 380, 431, 16))
        self.line_10.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_10.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_10.setObjectName("line_10")
        self.masters_status_1 = QtWidgets.QTextEdit(Barbershop)
        self.masters_status_1.setGeometry(QtCore.QRect(460, 160, 171, 141))
        self.masters_status_1.setObjectName("masters_status_1")
        self.masters_status_2 = QtWidgets.QTextEdit(Barbershop)
        self.masters_status_2.setGeometry(QtCore.QRect(460, 460, 171, 141))
        self.masters_status_2.setObjectName("masters_status_2")
        self.clients_now = QtWidgets.QPlainTextEdit(Barbershop)
        self.clients_now.setGeometry(QtCore.QRect(1140, 170, 161, 231))
        self.clients_now.setObjectName("clients_now")
        self.label_25 = QtWidgets.QLabel(Barbershop)
        self.label_25.setGeometry(QtCore.QRect(1150, 140, 131, 21))
        self.label_25.setTextFormat(QtCore.Qt.AutoText)
        self.label_25.setObjectName("label_25")
        self.step_modelling = QtWidgets.QComboBox(Barbershop)
        self.step_modelling.setGeometry(QtCore.QRect(50, 210, 111, 22))
        self.step_modelling.setObjectName("step_modelling")
        self.step_modelling.addItem("")
        self.step_modelling.addItem("")
        self.step_modelling.addItem("")
        self.step_modelling.addItem("")
        self.step_modelling.addItem("")
        self.step_modelling.addItem("")
        self.step_modelling.setItemText(5, "")
        self.restart = QtWidgets.QPushButton(Barbershop)
        self.restart.setGeometry(QtCore.QRect(230, 660, 93, 28))
        self.restart.setObjectName("restart")
        self.restart.setDisabled(True)
        self.new_clients = QtWidgets.QPlainTextEdit(Barbershop)
        self.new_clients.setGeometry(QtCore.QRect(920, 170, 171, 231))
        self.new_clients.setObjectName("new_clients")
        self.label_26 = QtWidgets.QLabel(Barbershop)
        self.label_26.setGeometry(QtCore.QRect(930, 140, 131, 21))
        self.label_26.setTextFormat(QtCore.Qt.AutoText)
        self.label_26.setObjectName("label_26")
        self.barbershop_condition = QtWidgets.QPlainTextEdit(Barbershop)
        self.barbershop_condition.setGeometry(QtCore.QRect(210, 70, 141, 41))
        self.barbershop_condition.setObjectName("Время до закрытия")
        self.label_27 = QtWidgets.QLabel(Barbershop)
        self.label_27.setGeometry(QtCore.QRect(40, 80, 171, 21))
        self.label_27.setTextFormat(QtCore.Qt.AutoText)
        self.label_27.setObjectName("label_27")

        self.retranslateUi(Barbershop)
        self.config_buttons = [
            self.step_modelling,
            self.spinBox_masters,
            self.ot_request,
            self.do_request,
            self.ot_decline,
            self.do_decline
        ]

        self.start.clicked['bool'].connect(self.setup_model)
        for button in self.config_buttons:
            self.start.clicked['bool'].connect(button.setEnabled)
        self.start.clicked['bool'].connect(lambda x: self.start.setDisabled(True))
        self.start.clicked['bool'].connect(self.step.setDisabled)  # type: ignore
        self.start.clicked['bool'].connect(self.end.setDisabled)  # type: ignore
        self.start.clicked['bool'].connect(self.restart.setDisabled)

        self.step.clicked['bool'].connect(self.model_step)
        self.end.clicked['bool'].connect(self.model_end)
        self.end.clicked['bool'].connect(self.step.setEnabled)  # type: ignore

        self.restart.clicked.connect(self.restart_modelling)
        (self.restart.clicked.connect(lambda x: self.start.setDisabled(False)))
        for button in self.config_buttons:
            self.restart.clicked['bool'].connect(button.setDisabled)
        self.restart.clicked['bool'].connect(self.step.setEnabled)  # type: ignore
        self.restart.clicked['bool'].connect(self.end.setEnabled)  # type: ignore
        self.restart.clicked['bool'].connect(self.restart.setEnabled)
        self.exit.clicked['bool'].connect(Barbershop.close)
        QtCore.QMetaObject.connectSlotsByName(Barbershop)
        QtCore.QMetaObject.connectSlotsByName(Barbershop)
        QtCore.QMetaObject.connectSlotsByName(Barbershop)

    def retranslateUi(self, Barbershop):
        _translate = QtCore.QCoreApplication.translate
        Barbershop.setWindowTitle(_translate("Barbershop", "Barbershop"))
        self.label.setText(_translate("Barbershop", "Шаг моделирования"))
        self.label_3.setText(_translate("Barbershop", "Кол-во мастеров"))
        self.label_4.setText(_translate("Barbershop", "(2-5) шт"))
        self.label_5.setText(_translate("Barbershop", "Промежуток времени между воз-ем двух заявок"))
        self.label_6.setText(_translate("Barbershop", "от"))
        self.label_7.setText(_translate("Barbershop", "до"))
        self.label_8.setText(_translate("Barbershop", "Отклонение от средней длит-ти обслуживания"))
        self.label_9.setText(_translate("Barbershop", "от"))
        self.label_10.setText(_translate("Barbershop", "до"))
        self.start.setText(_translate("Barbershop", "Старт"))
        self.step.setText(_translate("Barbershop", "Шаг"))
        self.end.setText(_translate("Barbershop", "До конца"))
        self.exit.setText(_translate("Barbershop", "Выход"))
        self.label_11.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:12pt;\">Зал 1</span></p></body></html>"))
        self.label_13.setText(_translate("Barbershop", "<html><head/><body><p>Длина очереди :</p></body></html>"))
        self.label_14.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:10pt;\">Текущее время :</span></p></body></html>"))
        self.label_15.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:7pt;\">Состояние мастеров:</span></p></body></html>"))
        self.label_18.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:11pt;\">Статистика</span></p></body></html>"))
        self.label_19.setText(_translate("Barbershop", "<html><head/><body><p>Число обслуженных клиентов :</p></body></html>"))
        self.label_20.setText(_translate("Barbershop", "<html><head/><body><p>Сред. дл-ть обслуживания :</p></body></html>"))
        self.label_21.setText(_translate("Barbershop", "<html><head/><body><p>Скопившаяся очередь:</p></body></html>"))
        self.label_22.setText(_translate("Barbershop", "<html><head/><body><p>Сред. зарплата мастеров :</p></body></html>"))
        self.label_23.setText(_translate("Barbershop", "<html><head/><body><p>Общее время их простоя :</p></body></html>"))
        self.label_16.setText(_translate("Barbershop", "<html><head/><body><p>Длина очереди :</p></body></html>"))
        self.label_24.setText(_translate("Barbershop", "<html><head/><body><p>Скопившаяся очередь:</p></body></html>"))
        self.label_12.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:12pt;\">Зал 2</span></p></body></html>"))
        self.label_17.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:7pt;\">Состояние мастеров:</span></p></body></html>"))
        self.label_25.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:9pt;\">Клиенты(сейчас):</span></p></body></html>"))
        self.step_modelling.setItemText(0, _translate("Barbershop", "5 минут"))
        self.step_modelling.setItemText(1, _translate("Barbershop", "15 минут"))
        self.step_modelling.setItemText(2, _translate("Barbershop", "10 минут"))
        self.step_modelling.setItemText(3, _translate("Barbershop", "30 минут"))
        self.step_modelling.setItemText(4, _translate("Barbershop", "1 час"))
        self.restart.setText(_translate("Barbershop", "С начала"))
        self.label_26.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:10pt;\">Новые клиенты</span></p></body></html>"))
        self.label_27.setText(_translate("Barbershop", "<html><head/><body><p><span style=\" font-size:10pt;\">Состояние салона:</span></p></body></html>"))

def opening_hours():
    first_day_open = 28800
    last_day_open = 374400
    budni = np.asarray(
        [[i for i in range(j, j + 43200)] for j in range(first_day_open, last_day_open, 86400)])
    weekend = [i for i in range(460800, 489600)]
    budni = list(budni.flatten())
    open_hours = budni + weekend
    return open_hours


class State_model(Enum):
    finish = 1
    open = 2
    close = 3

def convert_to_new_format(mins):
    day = mins // (24 * 60)
    hour = (mins % (24 * 60)) //  60
    minutes = (mins % (24 * 60)) % 60
    return day, hour, minutes